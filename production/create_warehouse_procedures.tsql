USE chirp
-- Sadly, TSQL scripts don't seem to crash
-- IF chirp doesn't exist, this script continues after the GO statement.
GO


IF OBJECT_ID ( 'import_into_data_warehouse_by_table_birth', 'P' ) IS NOT NULL
	DROP PROCEDURE import_into_data_warehouse_by_table_birth;
GO
CREATE PROCEDURE import_into_data_warehouse_by_table_birth
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--date_of_birth
--sex
--birth_weight_lbs

	INSERT INTO observations
		(chirp_id,provider_id,location_id,concept,started_at,value_type,t_value) 
		SELECT 123,456,789,'birth:date_of_birth',b.date_of_birth,'T',b.date_of_birth
		FROM vital_records.birth b

	--		JOIN private.identifiers i
	--			ON i.source_schema = 'vital_records'
	--			AND i.source_table = 'birth'
	--			AND i.source_column = 'state_file_number'
	--			AND i.source_id = b.state_file_number

		WHERE b.imported_to_dw = 'FALSE'

	--			AND


	UPDATE vital_records.birth
		SET imported_to_dw = 'TRUE'
		WHERE imported_to_dw = 'FALSE'

	--	WHERE
	--		(same as above)

END
GO



IF OBJECT_ID ( 'import_into_data_warehouse_by_schema', 'P' ) IS NOT NULL
	DROP PROCEDURE import_into_data_warehouse_by_schema;
GO
CREATE PROCEDURE import_into_data_warehouse_by_schema( @schema VARCHAR(50) )
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @table VARCHAR(50)
	DECLARE @proc VARCHAR(50)

	DECLARE tables CURSOR FOR SELECT t.name 
		FROM sys.tables AS t
		INNER JOIN sys.schemas AS s
		ON t.[schema_id] = s.[schema_id]
		WHERE s.name = @schema;

	OPEN tables
	WHILE(1=1)BEGIN
		FETCH tables INTO @table;
		IF(@@FETCH_STATUS <> 0)
			BREAK
		PRINT @table
		--	EXEC import_into_data_warehouse_by_table(@schema,@table)
		SET @proc = 'import_into_data_warehouse_by_table_' + @table

		IF OBJECT_ID ( @proc, 'P' ) IS NOT NULL
		BEGIN
			PRINT 'Importing select fields'
			EXEC @proc
		END
		ELSE
			PRINT 'Ignoring table'

	END
	CLOSE tables;
	DEALLOCATE tables;

END	--	import_into_data_warehouse_by_schema
GO

IF OBJECT_ID ( 'import_into_data_warehouse', 'P' ) IS NOT NULL
	DROP PROCEDURE import_into_data_warehouse;
GO
CREATE PROCEDURE import_into_data_warehouse
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--	DECLARE @schemas TABLE ( name VARCHAR(50) )
--	INSERT INTO @schemas VALUES ( 'vital_records' )	
--
--	DECLARE schemas CURSOR FOR SELECT s.name FROM @schemas s
--
--	DECLARE @schema VARCHAR(50)
--
--	OPEN schemas
--	WHILE(1=1)BEGIN
--		FETCH schemas INTO @schema;
--		IF(@@FETCH_STATUS <> 0)
--			BREAK
--		PRINT @schema
--		EXEC import_into_data_warehouse_by_schema @schema

		--Until there are more than a dozen, this above is a bit excessive!
		EXEC import_into_data_warehouse_by_schema 'vital_records'

--	END
--	CLOSE schemas;
--	DEALLOCATE schemas;

END	--	import_into_data_warehouse
GO



