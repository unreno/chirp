USE chirp
-- Sadly, TSQL scripts don't seem to crash
-- IF chirp doesn't exist, this script continues after the GO statement.
GO


IF OBJECT_ID('[dbo].concepts', 'U') IS NOT NULL
	DROP TABLE [dbo].concepts;
CREATE TABLE [dbo].concepts (
	id int IDENTITY(1,1),
	code VARCHAR(255) PRIMARY KEY,
	path VARCHAR(255),
	description VARCHAR(MAX),
	CONSTRAINT unique_code 
		UNIQUE (code)
);
-- Examples:
-- code: ICD10CM:M71.432, description: Calcium deposit in bursa, left wrist
-- code: HCPC:0356T, description: INSERTION OF DRUG-ELUTING IMPLANT ....
-- code: LOINC:8302-2, description: Body Height (LOINC:8302-2)
-- code: LOINC:3141-9, description: Body Weight (LOINC:3141-9)
-- code: DEM:Race, description: Race
-- code: DEM:Language, description: Language



IF OBJECT_ID('[dbo].providers', 'U') IS NOT NULL
	DROP TABLE [dbo].providers;
CREATE TABLE [dbo].providers (
	id int IDENTITY(1,1) PRIMARY KEY,


);



/*

--Not sure what purpose this table can serve.

IF OBJECT_ID('[dbo].encounters', 'U') IS NOT NULL
	DROP TABLE [dbo].encounters;
CREATE TABLE [dbo].encounters (
	id int IDENTITY(1,1) PRIMARY KEY,

);
*/




IF OBJECT_ID('[dbo].locations', 'U') IS NOT NULL
	DROP TABLE [dbo].locations;
CREATE TABLE [dbo].locations (
	id int IDENTITY(1,1) PRIMARY KEY,


);




--Can't declare foreign key constraints until those tables exist.
IF OBJECT_ID('[dbo].observations', 'U') IS NOT NULL
	DROP TABLE [dbo].observations;
CREATE TABLE [dbo].observations (
	id int IDENTITY(1,1) PRIMARY KEY,
	chirp_id        INT NOT NULL,
--	encounter_id    INT NOT NULL,
	provider_id     INT NOT NULL,
	location_id     INT NOT NULL,
	concept         VARCHAR(255) NOT NULL,
	started_at      DATETIME NOT NULL,
	ended_at        DATETIME,
	value_type      VARCHAR(1) NOT NULL,
	n_value         DECIMAL(18,5),
	s_value         VARCHAR(255),
--	l_value         VARCHAR(MAX),
--	d_value         DATE,
	t_value         DATETIME,
	units           VARCHAR(20),
	downloaded_at   DATETIME,
	downloaded_from VARCHAR(50),
	imported_at     DATETIME,
--	CONSTRAINT fk_encounter_id
--		FOREIGN KEY (encounter_id) REFERENCES encounters(id),
--	CONSTRAINT fk_provider_id
--		FOREIGN KEY (provider_id) REFERENCES providers(id),
--	CONSTRAINT fk_location_id
--		FOREIGN KEY (location_id) REFERENCES locations(id),
	CONSTRAINT fk_concept_code
		FOREIGN KEY (concept) REFERENCES concepts(code)
);


-- These could have been included in the CREATE
ALTER TABLE [dbo].observations ADD CONSTRAINT ck_value_type CHECK (
	value_type IN ('N','T','S')
--	value_type IN ('N','D','T','S','L')
);
ALTER TABLE [dbo].observations ADD CONSTRAINT ck_n_value CHECK (
	( value_type <> 'N' AND n_value IS NULL ) OR
	( value_type = 'N' AND n_value IS NOT NULL )
);
--ALTER TABLE [dbo].observations ADD CONSTRAINT ck_d_value CHECK (
--	( value_type <> 'D' AND d_value IS NULL ) OR
--	( value_type = 'D' AND d_value IS NOT NULL )
--);
ALTER TABLE [dbo].observations ADD CONSTRAINT ck_t_value CHECK (
	( value_type <> 'T' AND t_value IS NULL ) OR
	( value_type = 'T' AND t_value IS NOT NULL )
);
-- The s_value can contain data when not Short Text type.
ALTER TABLE [dbo].observations ADD CONSTRAINT ck_s_value CHECK (
	( value_type <> 'S' ) OR
	( value_type = 'S' AND s_value IS NOT NULL )
);
-- Can the l_value contain data when not Long Text type?
--ALTER TABLE [dbo].observations ADD CONSTRAINT ck_l_value CHECK (
--	( value_type <> 'L' AND l_value IS NULL ) OR
--	( value_type = 'L' AND l_value IS NOT NULL )
--);






USE chirp;

IF OBJECT_ID ( 'import_into_data_warehouse_by_table_birth', 'P' ) IS NOT NULL
	DROP PROCEDURE import_into_data_warehouse_by_table_birth;
GO
CREATE PROCEDURE import_into_data_warehouse_by_table_birth
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--date_of_birth
--sex
--birth_weight_lbs

	INSERT INTO observations
		(chirp_id,provider_id,location_id,concept,started_at,value_type,t_value) 
		SELECT 123,456,789,'birth:date_of_birth',b.date_of_birth,'T',b.date_of_birth
		FROM vital_records.birth b

	--		JOIN private.identifiers i
	--			ON i.source_schema = 'vital_records'
	--			AND i.source_table = 'birth'
	--			AND i.source_column = 'state_file_number'
	--			AND i.source_id = b.state_file_number

		WHERE b.imported_to_dw = 'FALSE'

	--			AND


	UPDATE vital_records.birth
		SET imported_to_dw = 'TRUE'
		WHERE b.imported_to_dw = 'FALSE'
	--	WHERE
	--		(same as above)

END
GO



IF OBJECT_ID ( 'import_into_data_warehouse_by_schema', 'P' ) IS NOT NULL
	DROP PROCEDURE import_into_data_warehouse_by_schema;
GO
CREATE PROCEDURE import_into_data_warehouse_by_schema( @schema VARCHAR(50) )
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @table VARCHAR(50)

	DECLARE tables CURSOR FOR SELECT t.name 
		FROM sys.tables AS t
		INNER JOIN sys.schemas AS s
		ON t.[schema_id] = s.[schema_id]
		WHERE s.name = @schema;

	OPEN tables
	WHILE(1=1)BEGIN
		FETCH tables INTO @table;
		IF(@@FETCH_STATUS <> 0)
			BREAK
		PRINT @table
		--	EXEC import_into_data_warehouse_by_table(@schema,@table)

--IF OBJECT_ID ( 'import_into_data_warehouse_by_table_@table', 'P' ) IS NOT NULL


	END
	CLOSE tables;
	DEALLOCATE tables;

END	--	import_into_data_warehouse_by_schema
GO

IF OBJECT_ID ( 'import_into_data_warehouse', 'P' ) IS NOT NULL
	DROP PROCEDURE import_into_data_warehouse;
GO
CREATE PROCEDURE import_into_data_warehouse
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

--	DECLARE @schemas TABLE ( name VARCHAR(50) )
--	INSERT INTO @schemas VALUES ( 'vital_records' )	
--
--	DECLARE schemas CURSOR FOR SELECT s.name FROM @schemas s
--
--	DECLARE @schema VARCHAR(50)
--
--	OPEN schemas
--	WHILE(1=1)BEGIN
--		FETCH schemas INTO @schema;
--		IF(@@FETCH_STATUS <> 0)
--			BREAK
--		PRINT @schema
--		EXEC import_into_data_warehouse_by_schema @schema

		--Until there are more than a dozen, this above is a bit excessive!
		EXEC import_into_data_warehouse_by_schema 'vital_records'

--	END
--	CLOSE schemas;
--	DEALLOCATE schemas;

END	--	import_into_data_warehouse
GO



